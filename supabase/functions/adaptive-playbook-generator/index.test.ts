import { assertEquals, assert } from "https://deno.land/std@0.140.0/testing/asserts.ts";
import { SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { playbookGeneratorService } from "./index.ts";

// --- Test Configuration & Mocks ---

Deno.env.set("GEMINI_API_KEY", "mock-key");

let shouldGeminiFail = false;

const mockAiResponse = {
    playbookTitle: "AI-Generated Playbook",
    playbookDescription: "A test playbook generated by AI.",
    steps: [
        { id: "step1", title: "Run Audit", description: "First, run an audit.", rationale: "Because data is good.", toolId: "audit" },
        { id: "step2", title: "Optimize Content", description: "Next, optimize content.", rationale: "Because good content is better.", toolId: "optimizer" }
    ]
};

const mockFetch = (async (
  _url: string | URL,
  _options?: RequestInit,
): Promise<Response> => {
  if (shouldGeminiFail) {
    return new Response(JSON.stringify({ error: "Mock Gemini API Error" }), { status: 500 });
  }
  const mockGeminiResponse = {
    candidates: [{ content: { parts: [{ text: JSON.stringify(mockAiResponse) }] } }],
  };
  return new Response(JSON.stringify(mockGeminiResponse));
}) as typeof fetch;

const createMockSupabaseClient = () => {
    return {
        from: (table: string) => {
            if (table === 'tool_runs') {
                return {
                    insert: () => ({
                        select: () => ({
                            single: () => Promise.resolve({ data: { id: '123' }, error: null })
                        })
                    }),
                    update: () => ({
                        eq: () => Promise.resolve({ data: null, error: null })
                    })
                }
            }
            return {
                select: () => ({
                    eq: () => ({
                        single: () => Promise.resolve({ data: { id: 'mock-profile-id', goals: ['increase_citations'] }, error: null }),
                        order: () => ({
                            limit: () => Promise.resolve({ data: [{ overall_score: 65 }], error: null }),
                        }),
                    }),
                }),
            }
        },
    } as unknown as SupabaseClient;
};


// --- Test Suite ---

Deno.test("playbook-generator success case", async (t) => {
  const originalFetch = globalThis.fetch;
  globalThis.fetch = mockFetch;
  shouldGeminiFail = false;
  const mockSupabase = createMockSupabaseClient();

  await t.step("it generates a playbook successfully", async () => {
    try {
      const req = new Request("http://localhost/playbook-generator", {
        method: "POST",
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectId: "test-project-id",
          userId: "test-user-id",
          goal: "Increase citations",
          focusArea: "citation_likelihood"
        }),
      });

      const response = await playbookGeneratorService(req, mockSupabase);
      const data = await response.json();

      assertEquals(response.status, 200);
      assertEquals(data.success, true);
      assertEquals(data.data.playbookTitle, mockAiResponse.playbookTitle);
      assertEquals(data.data.steps.length, 2);
      assert(data.data.steps[0].rationale.includes("data is good"));

    } finally {
      globalThis.fetch = originalFetch;
    }
  });
});

Deno.test("playbook-generator failure case", async (t) => {
    const originalFetch = globalThis.fetch;
    globalThis.fetch = mockFetch;
    shouldGeminiFail = true;
    const mockSupabase = createMockSupabaseClient();

    await t.step("it returns a standard error response", async () => {
      try {
        const req = new Request("http://localhost/playbook-generator", {
          method: "POST",
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            projectId: "test-project-id",
            userId: "test-user-id",
            goal: "Increase citations",
            focusArea: "citation_likelihood"
          }),
        });

        const response = await playbookGeneratorService(req, mockSupabase);
        const data = await response.json();

        assertEquals(response.status, 500);
        assertEquals(data.success, false);
        assert(data.error.message.includes("The AI model failed to process the request"));

      } finally {
        globalThis.fetch = originalFetch;
        shouldGeminiFail = false;
      }
    });
  });
