import re
import time
from playwright.sync_api import sync_playwright, Page, expect

def run_verification(page: Page):
    """
    This script verifies the end-to-end flow of generating an
    AI-powered adaptive playbook.
    """
    # 1. Sign up for a Pro plan user
    unique_email = f"testuser_{int(time.time())}@example.com"
    password = "password123"

    print(f"Signing up with new user: {unique_email} for a Pro plan.")
    page.goto("http://localhost:5173/")

    pro_plan_card = page.locator(".border-purple-600")
    expect(pro_plan_card).to_be_visible(timeout=20000)
    pro_plan_card.get_by_role("button", name="Choose Plan").click()

    expect(page.get_by_role("heading", name="Create Account")).to_be_visible()
    expect(page.locator("div.font-medium.text-purple-600").get_by_text("Pro Plan")).to_be_visible()

    page.get_by_placeholder("Enter your full name").fill("Pro Test User")
    page.get_by_placeholder("Enter your email").fill(unique_email)
    page.get_by_placeholder("Enter your password").fill(password)
    page.get_by_role("button", name="Create Account").click()
    print("Signup form submitted for Pro plan.")

    # 2. Complete onboarding
    print("Starting onboarding...")
    expect(page.get_by_role("heading", name="Add Your Websites")).to_be_visible(timeout=20000)
    page.get_by_placeholder("https://example.com").fill("https://example.com")
    page.get_by_placeholder("My Website").fill("Test Site")
    page.get_by_role("button", name="Next").click()

    expect(page.get_by_role("heading", name="Tell Us About Your Business")).to_be_visible()
    page.get_by_role("combobox").select_option("Technology & Software")
    page.get_by_role("button", name="Next").click()

    expect(page.get_by_role("heading", name="Add Your Competitors")).to_be_visible()
    page.get_by_placeholder("https://competitor.com").fill("https://competitor.com")
    page.get_by_placeholder("Competitor Name").fill("Competitor Inc.")
    page.get_by_role("button", name="Next").click()

    expect(page.get_by_role("heading", name="Set Your AI Visibility Goals")).to_be_visible()
    page.get_by_text("Increase AI Citations").click()
    page.get_by_role("button", name="Complete Setup").click()
    print("Onboarding complete.")

    # 3. Navigate to Playbooks section
    expect(page.get_by_text("Welcome to SEOGENIX!")).to_be_visible(timeout=20000)
    # Use force=True to click through the persistent modal overlay
    page.get_by_role("button", name="Optimization Playbooks").click(force=True)
    print("Navigated to Playbooks section.")

    # 4. Fill out the form and generate a playbook
    expect(page.get_by_role("heading", name="Adaptive Playbooks")).to_be_visible()
    goal_input = page.get_by_placeholder("e.g., Increase organic traffic by 20% in Q3")
    expect(goal_input).to_have_value(re.compile("Achieve my goal of: Increase AI Citations"))

    page.get_by_role("combobox").select_option("citation_likelihood")

    generate_button = page.get_by_role("button", name="Generate Playbook")
    expect(generate_button).to_be_enabled()
    generate_button.click()
    print("Generating playbook...")

    # 5. Wait for the playbook to be displayed and verify its contents
    expect(page.get_by_role("heading", name="Your Step-by-Step Guide")).to_be_visible(timeout=30000)
    print("Playbook generated and displayed.")

    # Check for the title, description, and the rationale of the first step
    expect(page.get_by_role("heading", name="AI-Generated Playbook")).to_be_visible()
    expect(page.get_by_text("A test playbook generated by AI.")).to_be_visible()
    expect(page.get_by_text("Rationale")).to_be_visible()
    expect(page.get_by_text("Because data is good.")).to_be_visible()
    print("Playbook content verified.")

    # 6. Take a screenshot
    page.screenshot(path="jules-scratch/verification/playbook_verification.png")
    print("Screenshot taken.")


def main():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        try:
            run_verification(page)
        except Exception as e:
            print(f"An error occurred: {e}")
            page.screenshot(path="jules-scratch/verification/error.png")
        finally:
            browser.close()

if __name__ == "__main__":
    main()
